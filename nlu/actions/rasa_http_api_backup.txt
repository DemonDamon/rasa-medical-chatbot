
import json
import secrets
import requests
import jwt

from sanic import Sanic, response
from sanic.request import Request
from sanic.response import HTTPResponse
from sanic_cors import CORS
from sanic_jwt import Initialize, exceptions

# from .robot_20220322.robot_20220306_cpu import Robot

def colorstr(*input, color="blue", bold=False, underline=False):
    colors = {'black': '\033[30m',  # basic colors
              'red': '\033[31m',
              'green': '\033[32m',
              'yellow': '\033[33m',
              'blue': '\033[34m',
              'magenta': '\033[35m',
              'cyan': '\033[36m',
              'white': '\033[37m',
              'bright_black': '\033[90m',  # bright colors
              'bright_red': '\033[91m',
              'bright_green': '\033[92m',
              'bright_yellow': '\033[93m',
              'bright_blue': '\033[94m',
              'bright_magenta': '\033[95m',
              'bright_cyan': '\033[96m',
              'bright_white': '\033[97m',
              'end': '\033[0m',  # misc
              'bold': '\033[1m',
              'underline': '\033[4m'}
    prefix = colors[color]
    if bold:
        prefix += colors["bold"]
    if underline:
        prefix += colors["underline"]

    return "{}{}{}".format(prefix, input[0], colors["end"])


app = Sanic("sinohealth_rasa_robot_service")


if __name__ == "__main__":
    print(colorstr(" \n================ SINOHEALTH RASA ROBOT ================ ", color="yellow", bold=True))

    # 放在actions目录下面，这里要加main，不然在开启actions服务的时候也会执行这里的程序入口
    # 一般user没有权限，仅有admin没有username也是可以访问
    payload = {"user": {"username": "damon", "role": "admin"}}  # 可以访问
    signed = jwt.encode(payload, "sinohealth_rasa_robot", algorithm="HS256")
    headers = {
        'Authorization': 'Bearer {0}'.format(signed),
        'Content-Type': 'text/plain'
    }

    baseUrl = "http://192.168.60.10:25783" # "http://localhost:5005" #

    conversation_id = secrets.token_urlsafe(16)  # 随机生成会话id

    intent_cls_url = "{0}/model/parse".format(baseUrl)  # 预测当前用户输入的意图
    messages_url = "{0}/conversations/{1}/messages".format(baseUrl, conversation_id)  # 发送消息
    predict_url = "{0}/conversations/{1}/predict".format(baseUrl, conversation_id)  # 预测下一步动作
    execute_url = "{0}/conversations/{1}/execute".format(baseUrl, conversation_id)  # 执行动作
    inject_intent_url = "{0}/conversations/{1}/trigger_intent".format(baseUrl, conversation_id)
    action = "action_listen"  # 动作初始化为等待输入
    messages = None

    while True:
        if action in ["action_listen", "action_default_fallback", "action_restart"]:
            # 等待输入
            text = input(colorstr("\nUser({0}) -> ".format(conversation_id), color="blue", bold=True))

            data = json.dumps(
                {"text": text, "sender": "user"},  # 一定要"user"才行
                ensure_ascii=False
            ).encode(encoding="utf-8")
            requests.request("POST", messages_url, headers=headers, data=data) # TODO: ?

        elif action == "action_arouse_diagnosis_api":
            # 如果上一次返回的messages中包含buttons，则进行下面判断
            if messages and "buttons" in messages[0]:
                # 等待输入
                text = input(colorstr("\nUser({0}) -> ".format(conversation_id), color="blue", bold=True))

                # 意图预测
                data = json.dumps(
                    {"text": text},
                    ensure_ascii=False
                ).encode(encoding="utf-8")
                response_raw = requests.request("POST", intent_cls_url, headers=headers, data=data)
                response_json = json.loads(response_raw.text.encode('utf8'))

                # 如果用户输入的意图是肯定的意图"affirm"，则意味着当前的症状选择为阳性，否则为阴性
                if response_json["intent"]["name"] == "affirm":
                    _diagnosis_choice = "positive"
                else:
                    _diagnosis_choice = "negative"
                print(
                    colorstr("[BACKEND] symptom positive or negative  - {0}", color="green").format(
                        colorstr(_diagnosis_choice, color="bright_green")
                    )
                )

                # 构建http请求数据体
                payload = json.dumps({
                    "name": "medical_affirm",
                    "entities": {
                        "diagnosis_choice": _diagnosis_choice
                    }
                })

                # 注入"medical_affirm"意图并携带"diagnosis_choice"实体到rasa服务端
                response = requests.request("POST", inject_intent_url, headers=headers, data=payload)

        # 对当前用户的输入预测的下一步action
        response_json = json.loads(
            requests.request("POST", predict_url, headers=headers).text.encode('utf8')
        )

        # 取出置信度最高的下一步动作
        action = response_json["scores"][0]["action"]

        print(
            colorstr("[BACKEND] robot predicted next action   - {0}", color="green").format(
                colorstr(action, color="bright_green")
            )
        )

        # 执行预测动作
        data = json.dumps(
            {"name": action},
            ensure_ascii=False
        ).encode(encoding="utf-8")
        response_json = json.loads(
            requests.request("POST", execute_url, headers=headers, data=data).text.encode('utf8')
        )

        # 执行动作后，robot返回的对话消息
        messages = response_json["messages"]
        if messages:
            _printout = "\n"
            for _id, message in enumerate(messages):
                _title_list = []
                if "buttons" in message:
                    for button in message["buttons"]:
                        _title_list.append(button["title"])

                _title_str = ""
                if len(_title_list) == 2:
                    _title_str = "(请回答'{0}'或'{1}')".format(_title_list[0], _title_list[1])
                elif len(_title_list) > 2:
                    _title_str = "(可选: {0})".format(", ".join(_title_list))

                _printout += colorstr("Robot -> {0}{1}", color="red", bold=True).format(message["text"],
                                                                                        _title_str)
                if _id != len(messages) - 1:
                    _printout += "\n"
            print(_printout)
